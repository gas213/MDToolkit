### LAMMPS Input File - Equilibration of cube droplet

## Initialization

units           real
atom_style      full
boundary        p p p
pair_style      lj/cut/coul/long 10 10
pair_modify     mix arithmetic
pair_modify     tail no
special_bonds   amber
bond_style      harmonic
angle_style     harmonic
dihedral_style  opls
improper_style  none

## Read an initial data file or a restart file
# UNCOMMENT ONE OF THE TWO COMMANDS BELOW AND FILL IN {{FIELD}} IF NEEDED
# IF YOU ARE RESTARTING A RUN WITHIN THE SAME DIRECTORY, RENAME YOUR LOG FILES SO THEY DON'T GET OVERWRITTEN
# Using the * wildcard will find the largest-numbered restart file in the directory

#read_data      {{data_file}}
#read_restart	restart_*.rst

## Variables requiring specification
# FILL IN {{FIELDS}}

# Thermostat temperature in degrees Celsius (25, 40, 60, 80)
variable	TEMP_C equal {{T}}

# Number of time steps to run; try 200000 (0.4 ns if time step size is 4 fs)
variable	STEPS equal {{N}}
# Frequency of counting vapor particles (every N steps); try 100
variable	VAPOR_COUNT_FREQ equal {{N}}
# Frequency of averaging the vapor counts (every N steps); try 10000
# (Due to the way these variables are being used, VAPOR_AVG_FREQ must be a multiple of VAPOR_COUNT_FREQ)
variable	VAPOR_AVG_FREQ equal {{N}}
# Frequency of creating dump files (every N steps); try 1000
variable	DUMP_FREQ equal {{N}}
# Frequency of writing thermo output to the LAMMPS log file (every N steps); try 1000
variable	THERMO_FREQ equal {{N}}
# Frequency of writing restart files (every N steps); try ~2 restarts per day of wall time
variable	RESTART_FREQ equal {{N}}

# Approximate center coordinates and slightly oversized radius of the droplet (in box units)
variable    DROP_X equal 231.0
variable    DROP_Y equal 223.0
variable    DROP_Z equal 304.0
variable    DROP_R equal 165.0

## Variables with auto-calculated values

# Thermostat temperature in degrees Kelvin
variable    TEMP_K equal $(v_TEMP_C + 273.15)

# Volume of the vapor sampling region (simulation box minus spherical droplet zone)
variable    VAPOR_VOLUME equal $(abs(xhi - xlo) * abs(yhi - ylo) * abs(zhi - zlo) - (4.0 / 3.0) * PI * v_DROP_R^3)

## Neighbor parameters and force field coefficients

neighbor        2.0 bin
neigh_modify    delay 0
kspace_style    pppm 1e-5
kspace_modify   order 4

## Define spherical exclusion zone for vapor sampling
# Once the droplet reaches a round shape, this region should capture all of the vapor space (except for a slim margin near the surface of the droplet)

region		VAPOR_REGION sphere $(v_DROP_X) $(v_DROP_Y) $(v_DROP_Z) $(v_DROP_R) side out units box

## Define atom/molecule groups

group		H2O type 6 7
group		CHLORINE type 4
group		SODIUM type 5
group		OXYGEN type 6

## Define dynamic groups for vapor sampling

group		VAPOR dynamic H2O region VAPOR_REGION every $(v_VAPOR_COUNT_FREQ)
group		VAPOR_OXYGEN dynamic OXYGEN region VAPOR_REGION every $(v_VAPOR_COUNT_FREQ)

## Count the number of vapor molecules in the sampling region by counting oxygen atoms

variable	VAPOR_COUNT equal count(VAPOR_OXYGEN)

## Define compute to calculate vapor pressure (example from the compute stress/atom docs page)

compute		JUNK1 VAPOR stress/atom NULL
compute		JUNK2 VAPOR reduce sum c_JUNK1[1] c_JUNK1[2] c_JUNK1[3]
variable	VAPOR_PRESSURE equal -(c_JUNK2[1]+c_JUNK2[2]+c_JUNK2[3])/(3*v_VAPOR_VOLUME)

## Compute and print time-averaged vapor (oxygen) count

# Note: the fix ave/time command does not use the group ID; it is ignored
fix		VAPOR_COUNT_AVG all ave/time $(v_VAPOR_COUNT_FREQ) $(v_VAPOR_AVG_FREQ/v_VAPOR_COUNT_FREQ) $(v_VAPOR_AVG_FREQ) v_VAPOR_COUNT ave one file vapor_count.txt

## Dump settings

dump            DUMP_TEXT all custom $(v_DUMP_FREQ) dump_*.txt id type x y z
dump_modify     DUMP_TEXT sort id
dump            DUMP_NETCDF all netcdf $(v_DUMP_FREQ) dump_*.nc id type x y z
dump_modify     DUMP_NETCDF sort id

## Restart settings

restart		$(v_RESTART_FREQ) restart_*.rst

## Constraint for bond lengths

fix 		SHAKE all shake 1e-5 1000 0 m 1.0 

## Thermostatting

fix         NVT_H2O H2O nvt temp $(v_TEMP_K) $(v_TEMP_K) 100.0
fix         NVT_Cl CHLORINE nvt temp $(v_TEMP_K) $(v_TEMP_K) 100.0
fix         NVT_Na SODIUM nvt temp $(v_TEMP_K) $(v_TEMP_K) 100.0
velocity    CHLORINE create $(v_TEMP_K) 2248358 dist gaussian
velocity    SODIUM create $(v_TEMP_K) 2218358 dist gaussian
velocity    H2O create $(v_TEMP_K) 2628358 dist gaussian

## Thermodynamic output settings

thermo          $(v_THERMO_FREQ)
thermo_style    custom step time temp pe ke etotal enthalpy press vol density lx ly lz pxx pyy pzz pxy pxz pyz v_VAPOR_PRESSURE
thermo_modify   lost ignore flush yes

## Run the simulation

# Time step size is in femtoseconds
timestep        2
run             $(v_STEPS)

## Write restart data

write_data      write_*.data
